apis/
    - staffing.js
        : StaffingApi
            get()
            edit()
            add()
            delete()
        
sagas/
    - staffing.js
        : prefix = "STAFFING_"
        : fetchListAction*
            - Fetch the list of staffing entities
            - StaffingApi.get()
            - Put this into a reducer event
        : UpdateListAction*
            - Update the list of staffing actions
        : onboarding
            - yield STAFFING_ONBOARDING_USER_RECO
            - yield STAFFING_ONBOARDING_CANDIDATE_SELECTED
            - yield STAFFING_UPLOAD_FILE
reducers/
    - staffing.js
        : staffing_update
        : staffing_delete
    
    - Combine reducers
        : {
            grid: {
                list:{},
                pages: 2,
                filters: {},
                sort:{}
            },
            staffing: {
                employeeOnboarding: {},
                employeeEdit: {},
                employeeFOrm: {}
            }
        }
sagas/
    - index.js
        :sagas*
            -yield [
                fork(takeLatest, 'GRID_STAFFING', staffing.fetchListAction),
                fork(takeLatest, 'GRID_CANDIDATE', candidate.fetchListAction),
                
                // Staffing saga events
                fork(takeLatest, 'STAFFING_ONBOARDING', staffing.onboarding),
                fork(takeLatest, 'STAFFING_EDIT', staffing.edit),
                fork(takeLatest, 'STAFFING_UPLOAD_FILE', staffing.upload)

                // Candidate saga events
                fork(takeLatest, 'CANDIDATE_ONBOARDING', candidate.onboarding),

                ]
    - root.js
        while(true){
            sagas()
        }

- Can we put "PUT" prefix for all reducers??




- In grid state, add "workflow" to determine the active workflow
workflow: {
    id,
    application: {},
    recommendation: {},
    ...
} 
- Single WorkFlow Model: {
    id,
    render: <Component>,
    data: (state) => {
        state.applications
        state.recommendations
        do some customLogic here
    }


- ListingPageComponent
    - () => 
        - < WorkFlowWidget render = {(workflowReducerData): {
            <workflowDict[workFlow].render storedData = {...workflowReducerData} createData={...workflow.dataFn}>
        }}

- SampleWorkflowComponent 
    - Props: workflowReducerData
    - method:
        - data: this.props.createData() // data manipulation logic
        - actions : dispatchActions
- Generic Request Event :
    - calls api given to it via arguments
    - puts the data into the state by specifying the proper keys
        

Middleware subscribe to abortEvent() 
    events: {
        abort_1: {
            1: fn,
            2: fn,
            3. fn
        },
        abort_2: {
            
        }
    }
- Component ---> Emits "LIST_FETCH" event send pubsub op in variables -----> ----> Start Gql query -----> Middleware subscribe to abortEvent() ------Make Query--->Query in progress
- 

1. Component Emits "LIST_FETCH"
    a. Passes an "abortable" : Boolean

2. Saga :
    a. Publish the 'abort_[operationName]' event;
    b. Make graphql query
    c. gql Middleware - 
        1. Unsubscribes any existing 'abort_[operationName]' subscriptions
        2. Add new subscriptions
        3. Forward the request